name: Deploy to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Generate Static Files
        run: |
          cat > generate_static.py << 'EOF'
          import os
          import re
          import urllib.parse
          from pathlib import Path

          index_template = """<!DOCTYPE html>
          <html>
          <head>
              <title>{title} - Rohan\'s Digital Brain Dump</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
              <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
              <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
              <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
              <style>
                  body {{
                      font-family: 'Roboto', sans-serif;
                      display: flex;
                      min-height: 100vh;
                      flex-direction: column;
                      transition: all 0.3s ease;
                  }}
                  main {{
                      flex: 1 0 auto;
                      padding: 20px 0;
                  }}
                  .dark-mode {{
                      background-color: #263238;
                      color: #fff;
                  }}
                  .dark-mode .card {{
                      background-color: #37474f;
                      color: #fff;
                  }}
                  .dark-mode .card .card-action a {{
                      color: #89b2f5 !important;
                  }}
                  nav {{
                      padding: 0 20px;
                      margin-bottom: 20px;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                  }}
                  nav .brand-logo {{
                      font-size: 1.5rem;
                  }}
                  .breadcrumb-wrapper {{
                      background: #f5f5f5;
                      padding: 10px 20px;
                      border-radius: 4px;
                      margin-bottom: 20px;
                      transition: all 0.3s ease;
                  }}
                  .dark-mode .breadcrumb-wrapper {{
                      background: #37474f;
                  }}
                  .page-content {{
                      animation: fadeIn 0.5s ease-in;
                  }}
                  .directory-card {{
                      transition: transform 0.2s ease, box-shadow 0.2s ease;
                  }}
                  .directory-card:hover {{
                      transform: translateY(-5px);
                      box-shadow: 0 8px 17px rgba(0,0,0,0.2);
                  }}
                  .card-title {{
                      font-weight: 500 !important;
                      font-size: 1.4rem !important;
                  }}
                  .back-to-top {{
                      position: fixed;
                      bottom: 20px;
                      right: 20px;
                      display: none;
                  }}
                  .theme-toggle {{
                      position: fixed;
                      bottom: 80px;
                      right: 20px;
                  }}
                  @keyframes fadeIn {{
                      from {{ opacity: 0; transform: translateY(20px); }}
                      to {{ opacity: 1; transform: translateY(0); }}
                  }}
                  .file-icon {{
                      font-size: 2rem !important;
                      margin-right: 10px;
                  }}
                  .divider {{
                      margin: 30px 0;
                  }}
              </style>
          </head>
          <body>
              <nav class="blue darken-2">
                  <div class="nav-wrapper">
                      <a href="/" class="brand-logo">
                          <i class="material-icons">memory</i>
                          Rohan's Digital Brain Dump
                      </a>
                  </div>
              </nav>

              <main class="container">
                  <div class="breadcrumb-wrapper blue-text text-darken-3">
                      <i class="material-icons left">folder_open</i>
                      {breadcrumb}
                  </div>

                  <div class="page-content">
                      {content}
                  </div>
              </main>

              <div class="fixed-action-btn theme-toggle">
                  <a class="btn-floating btn-large blue darken-2 waves-effect waves-light" onclick="toggleTheme()">
                      <i class="large material-icons">brightness_medium</i>
                  </a>
              </div>

              <div class="fixed-action-btn back-to-top">
                  <a class="btn-floating btn-large blue darken-2 waves-effect waves-light" onclick="scrollToTop()">
                      <i class="large material-icons">arrow_upward</i>
                  </a>
              </div>

              <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
              <script>
                  document.addEventListener('DOMContentLoaded', function() {{
                      // Initialize Materialize components
                      M.AutoInit();
                      
                      // Show/hide back to top button
                      window.onscroll = function() {{
                          if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {{
                              document.querySelector('.back-to-top').style.display = 'block';
                          }} else {{
                              document.querySelector('.back-to-top').style.display = 'none';
                          }}
                      }};
                  }});

                  function scrollToTop() {{
                      document.body.scrollTop = 0;
                      document.documentElement.scrollTop = 0;
                  }}

                  function toggleTheme() {{
                      document.documentElement.classList.toggle('dark-mode');
                      document.body.classList.toggle('dark-mode');
                      localStorage.setItem('darkMode', document.documentElement.classList.contains('dark-mode'));
                      M.toast({{html: 'Theme toggled! ðŸŽ¨'}});
                  }}

                  if (localStorage.getItem('darkMode') === 'true') {{
                      document.documentElement.classList.add('dark-mode');
                      document.body.classList.add('dark-mode');
                  }}
              </script>
          </body>
          </html>
          """

          def generate_breadcrumb(path):
              if not path or path == '.':
                  return '<a href="/">Home</a>'
              
              parts = [p for p in path.split('/') if p]
              crumbs = ['<a href="/">Home</a>']
              current_path = ''
              
              for part in parts:
                  current_path = os.path.join(current_path, part)
                  url_path = urllib.parse.quote(os.path.join(current_path, 'index.html'))
                  crumbs.append(f'<a href="/{url_path}">{part}</a>')
              
              return ' / '.join(crumbs)

          def process_directory(directory):
              dir_path = Path(directory)
              
              # Generate directory listing
              entries = []
              for entry in sorted(dir_path.iterdir()):
                  rel_path = os.path.relpath(str(entry), 'docs')
                  name = entry.name
                  
                  if entry.is_dir():
                      icon = 'folder'
                      link = urllib.parse.quote(os.path.join(rel_path, 'index.html'))
                  else:
                      if not name.endswith('.html'):
                          continue
                      icon = 'description'
                      link = urllib.parse.quote(rel_path)
                      name = name[:-5]  # Remove .html extension for display
                      
                  card = f'''
                      <div class="col s12 m6 l4">
                          <div class="card directory-card hoverable">
                              <div class="card-content">
                                  <span class="card-title">
                                      <i class="material-icons file-icon blue-text">{icon}</i>
                                      {name}
                                  </span>
                              </div>
                              <div class="card-action">
                                  <a href="{link}" class="blue-text">
                                      <i class="material-icons left">arrow_forward</i>
                                      View {' Directory' if icon == 'folder' else ' File'}
                                  </a>
                              </div>
                          </div>
                      </div>
                  '''
                  entries.append(card)
              
              # Create index.html if directory doesn't already have one
              index_path = dir_path / 'index.html'
              if not index_path.exists():
                  rel_path = os.path.relpath(str(dir_path), 'docs')
                  title = os.path.basename(dir_path) or 'Home'
                  content = f'<div class="row">\n{"".join(entries)}\n</div>' if entries else '<div class="card-panel"><i class="material-icons left">info</i>Empty directory</div>'
                  breadcrumb = generate_breadcrumb(rel_path if rel_path != '.' else '')
                  
                  index_content = index_template.format(
                      title=title,
                      content=content,
                      breadcrumb=breadcrumb
                  )
                  
                  with open(index_path, 'w') as f:
                      f.write(index_content)
              
              # Process subdirectories
              for entry in dir_path.iterdir():
                  if entry.is_dir():
                      process_directory(entry)

          # Start processing from docs directory
          process_directory('docs')
          print("Static files generated successfully!")
          EOF
          
          python generate_static.py
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
